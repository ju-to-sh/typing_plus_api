# ゲームリストデータ
def game_lists
  [
    {title: 'Active Record', content: 'Active Recordに関する問題', game_type: 0, level: 3, category: 1},
    {title: 'CRUD処理', content: 'CRUD処理に関する問題', game_type: 0, level: 2, category: 1},
    {title: 'Ruby 条件分岐', content: 'Rubyの条件分岐に関する問題', game_type: 0, level: 1, category: 0},
    {title: 'Ruby 配列', content: 'Rubyの配列に関する問題', game_type: 0, level: 1, category: 0},
    {title: 'Ruby基本構文', content: 'Rubyでよく使用する基本構文に関するタイピング問題', game_type: 1, level: 2, category: 0},
    {title: 'Rails基本構文', content: 'Railsでよく使用する基本構文に関するタイピング問題', game_type: 1, level: 3, category: 1},
    {title: 'モデルスペック', content: 'RSpecのmodel specに関するタイピング問題', game_type: 1, level: 4, category: 1},
    {title: 'システムスペック', content: 'RSpecのsystem specに関するタイピング問題', game_type: 1, level: 5, category: 1},
    {title: 'リクエストスペック', content: 'RSpecのrequest specに関するタイピング問題', game_type: 1, level: 5, category: 1},
    {title: 'Action View', content: 'Railsのビューに関するタイピング問題', game_type: 1, level: 4, category: 1},
    {title: 'Active Model', content: 'Railsのモデルに関するタイピング問題', game_type: 1, level: 3, category: 1},
    {title: 'Action Controller', content: 'Railsのコントローラに関するタイピング問題', game_type: 1, level: 3, category: 1},
    {title: 'Active Record', content: 'Active Recordのクエリインターフェイスに関するタイピング問題', game_type: 1, level: 1, category: 1},
    {title: 'バリデーション', content: 'Railsのバリデーションに関するタイピング問題', game_type: 1, level: 2, category: 1},
  ]
end

# クイズデータ
def questions
  [
    {game_list_id: 1, content: "Active Recordについて正しい記述となるように(  )内に入る適切な言葉を選びなさい。\nActive Recordとは、(  )に相当するものであり、ビジネスデータとビジネスロジックを表すシステムの階層である。"},
    {game_list_id: 1, content:'O/Rマッピングの主な目的について最も適切なものを選びなさい。'},
    {game_list_id: 1, content: 'ActiveRecordのコールバックで、レコードが保存される前に実行されるコールバックを選びなさい'},
    {game_list_id: 1, content: 'ActiveRecordのアソシエーションで、has_manyの関連付けを持つモデルが子レコードを削除する際に、子レコードも一緒に削除されるようにするためのオプションを選びなさい'},
    {game_list_id: 1, content: 'ActiveRecordで、一意性を検証するためのバリデーションを選びなさい'},
    {game_list_id: 2, content: 'RailsのRESTfulルーティングにおいて、editアクションに対応するHTTPメソッドを選びなさい'},
    {game_list_id: 2, content: 'Railsのコントローラにおいて、before_actionフィルターを使用して特定のアクションの前に実行されるメソッドを指定する際、アクションをスキップするために使用するメソッドを選びなさい'},
    {game_list_id: 2, content: 'Railsのresourcesルーティングで、特定のリソースのネストされたリソースを定義する際の正しい記述を選びなさい'},
    {game_list_id: 2, content: 'Railsのストロングパラメータを使用して、userパラメータのうちnameとemailのみを許可するための正しい記述を選びなさい'},
    {game_list_id: 2, content: 'Railsのコントローラで、特定のアクションでのみ適用されるbefore_actionフィルターを設定するための正しい記述を選びなさい'},
    {game_list_id: 3, content: 'Rubyで条件分岐を一行で書く場合の正しい構文を選びなさい'},
    {game_list_id: 3, content: 'Rubyのcase文で、全ての条件が偽である場合に実行される節を選びなさい'},
    {game_list_id: 3, content: 'Rubyでunless文を使うときに注意すべきことを選びなさい'},
    {game_list_id: 3, content: 'Rubyの三項演算子を使用する正しい方法を選びなさい'},
    {game_list_id: 3, content: 'Rubyのcase文でwhen節を範囲オブジェクトで使用する場合、次のうち正しい構文を選びなさい'},
    {game_list_id: 4, content: 'Rubyで配列の要素をシャッフルするためのメソッドを選びなさい'},
    {game_list_id: 4, content: 'Rubyで配列の中から重複した要素を取り除くメソッドを選びなさい'},
    {game_list_id: 4, content: 'Rubyで配列の全ての要素が特定の条件を満たすかどうかを調べるメソッドを選びなさい'},
    {game_list_id: 4, content: "次のコードの出力結果を選びなさい\n
      arr = [10, 20, 30, 40, 50]\n
      result = arr.each_slice(2).map(&:reverse).flatten\n
      puts result"},
    {game_list_id: 4, content: "次のコードの出力結果を選びなさい\n
      arr = [[1, 2], [3, 4], [5, 6]]\n
      result = arr.transpose\n
      puts result.inspect"},
  ]
end

# クイズ選択肢データ
def question_choices
  [
    {quiz_id: 1, content: 'モデル', is_correct: true},
    {quiz_id: 1, content: 'コントローラ', is_correct: false},
    {quiz_id: 1, content: 'ビュー', is_correct: false},
    {quiz_id: 1, content: 'ルーティング', is_correct: false},
    {quiz_id: 2, content: 'データベースのスキーマを自動生成すること', is_correct: false},
    {quiz_id: 2, content: 'オブジェクト指向プログラミングとリレーショナルデータベースの間のインピーダンスミスマッチを解消すること', is_correct: true},
    {quiz_id: 2, content: 'データベースのクエリ性能を向上させること', is_correct: false},
    {quiz_id: 2, content: 'データベースのセキュリティを強化すること', is_correct: false},
    {quiz_id: 3, content: 'after_create', is_correct: false},
    {quiz_id: 3, content: 'before_update', is_correct: false},
    {quiz_id: 3, content: 'after_save', is_correct: false},
    {quiz_id: 3, content: 'before_save', is_correct: true},
    {quiz_id: 4, content: 'delete_all', is_correct: false},
    {quiz_id: 4, content: 'destroy_all', is_correct: false},
    {quiz_id: 4, content: 'dependent: :delete', is_correct: false},
    {quiz_id: 4, content: 'dependent: :destroy', is_correct: true},
    {quiz_id: 5, content: 'validates :attribute, unique: true', is_correct: false},
    {quiz_id: 5, content: 'validates :attribute, uniqueness: true', is_correct: true},
    {quiz_id: 5, content: 'validates_uniqueness_of :attribute', is_correct: false},
    {quiz_id: 5, content: 'validate :attribute, uniqueness: true', is_correct: false},
    {quiz_id: 6, content: 'GET', is_correct: true},
    {quiz_id: 6, content: 'POST', is_correct: false},
    {quiz_id: 6, content: 'PUT', is_correct: false},
    {quiz_id: 6, content: 'PATCH', is_correct: false},
    {quiz_id: 7, content: 'skip_action', is_correct: false},
    {quiz_id: 7, content: 'skip_before_action', is_correct: true},
    {quiz_id: 7, content: 'skip_filter', is_correct: false},
    {quiz_id: 7, content: 'skip_around_action', is_correct: false},
    {quiz_id: 8, content: 'resources :articles do nested_resources :comments end', is_correct: false},
    {quiz_id: 8, content: 'resources :articles with :comments', is_correct: false},
    {quiz_id: 8, content: 'resources :articles, nested: :comments', is_correct: false},
    {quiz_id: 8, content: 'resources :articles do resources :comments end', is_correct: true},
    {quiz_id: 9, content: 'params.require(:user).permit(:name, :email)', is_correct: true},
    {quiz_id: 9, content: 'params.allow(:user).only(:name, :email)', is_correct: false},
    {quiz_id: 9, content: 'arams.require(:user).allow(:name, :email)', is_correct: false},
    {quiz_id: 9, content: 'params.permit(:user).require(:name, :email)', is_correct: false},
    {quiz_id: 10, content: 'before_filter :authenticate_user, only: [:show, :edit]', is_correct: false},
    {quiz_id: 10, content: 'before_action :authenticate_user, if: [:show, :edit]', is_correct: false},
    {quiz_id: 10, content: 'before_action :authenticate_user, only: [:show, :edit]', is_correct: true},
    {quiz_id: 10, content: 'before_action :authenticate_user, except: [:show, :edit]', is_correct: false},
    {quiz_id: 11, content: 'if condition then do_something', is_correct: false},
    {quiz_id: 11, content: 'condition ? do_something : do_something_else', is_correct: false},
    {quiz_id: 11, content: 'do_something if condition', is_correct: true},
    {quiz_id: 11, content: 'condition then do_something', is_correct: false},
    {quiz_id: 12, content: 'else', is_correct: true},
    {quiz_id: 12, content: 'default', is_correct: false},
    {quiz_id: 12, content: 'when none', is_correct: false},
    {quiz_id: 12, content: 'nil', is_correct: false},
    {quiz_id: 13, content: 'unlessは条件が真のときに実行される', is_correct: false},
    {quiz_id: 13, content: 'unlessはelse節を持つことができない', is_correct: false},
    {quiz_id: 13, content: 'unlessは条件が偽のときに実行される', is_correct: true},
    {quiz_id: 13, content: 'unlessはブロックをサポートしていない', is_correct: false},
    {quiz_id: 14, content: 'condition ? if_false : if_true', is_correct: false},
    {quiz_id: 14, content: 'condition ? if_true : if_false', is_correct: true},
    {quiz_id: 14, content: 'if_true ? condition : if_false', is_correct: false},
    {quiz_id: 14, content: 'if_false : if_true ? condition', is_correct: false},
    {quiz_id: 15, content: 'when (1..5)', is_correct: false},
    {quiz_id: 15, content: 'when [1..5]', is_correct: false},
    {quiz_id: 15, content: 'when {1..5}', is_correct: false},
    {quiz_id: 15, content: 'when 1..5', is_correct: true},
    {quiz_id: 16, content: 'min', is_correct: false},
    {quiz_id: 16, content: 'shuffle', is_correct: true},
    {quiz_id: 16, content: 'randomize', is_correct: false},
    {quiz_id: 16, content: 'scramble', is_correct: false},
    {quiz_id: 17, content: 'uniq', is_correct: true},
    {quiz_id: 17, content: 'unique', is_correct: false},
    {quiz_id: 17, content: 'distinct', is_correct: false},
    {quiz_id: 17, content: 'remove_duplicates', is_correct: false},
    {quiz_id: 18, content: 'any?', is_correct: false},
    {quiz_id: 18, content: 'include?', is_correct: false},
    {quiz_id: 18, content: 'whole?', is_correct: false},
    {quiz_id: 18, content: 'all?', is_correct: true},
    {quiz_id: 19, content: '[20, 10, 40, 30, 50]', is_correct: true},
    {quiz_id: 19, content: '[10, 20, 30, 40, 50]', is_correct: false},
    {quiz_id: 19, content: '[10, 20, 30, 40]', is_correct: false},
    {quiz_id: 19, content: '[50, 40, 30, 20, 10]', is_correct: false},
    {quiz_id: 20, content: '[[1, 2, 3, 4, 5, 6]]', is_correct: false},
    {quiz_id: 20, content: '[[1, 2], [3, 4], [5, 6]]', is_correct: false},
    {quiz_id: 20, content: '[[1, 2], [3, 4]]', is_correct: false},
    {quiz_id: 20, content: '[[1, 3, 5], [2, 4, 6]]', is_correct: true},
  ]
end

# タイピング問題データ
def typing_questions
  [
    {game_list_id: 5, content: "fruits = ['apple', 'banana', 'cherry']\nfruits << 'date'"},
    {game_list_id: 5, content: "person = {name: 'Alice', age: 30, city: 'New York'}\nputs person[:name]"},
    {game_list_id: 5, content: "def greet(name)\n\t\"Hello, \#{name}!\"\nend\nputs greet('Bob')"},
    {game_list_id: 5, content: "numbers = [1, 2, 3, 4, 5]\nnumbers.each do |number|\n\tputs number * 2\nend"},
    {game_list_id: 5, content: "class Dog\n\tdef initialize(name)\n\t\t@name = name\n\tend\n\tdef bark\n\t\t\"\#{@name} says woof!\"\n\tend\nend\ndog = Dog.new('Rex')\nputs dog.bark"},
    {game_list_id: 6, content: "class ApplicationController < ActionController::Base\n\tprotect_from_forgery with::exception\nend"},
    {game_list_id: 6, content: "def create\n\t@article = Article.new(article_params)\n\tif @article.save\n\t\tredirect_to @article\n\telse\n\t\trender 'new'\n\tend\nend"},
    {game_list_id: 6, content: "resources :articles do\n\tresources :comments\nend"},
    {game_list_id: 6, content: "class Article < ApplicationRecord\n\thas_many :comments, dependent: :destroy\n\tvalidates :title, presence: true, length: { minimum: 5 }\nend"},
    {game_list_id: 6, content: "age = 18\nif age >= 18\n\tputs 'You are an adult.'\nelse\n\tputs 'You are a minor.'\nend"},
    { game_list_id: 7, content: "RSpec.describe User, type: :model do\n#モデルのバリデーションテスト\n\tit { should validate_presence_of(:email) }\nend" },
    { game_list_id: 7, content: "RSpec.describe User, type: :model do\n#モデルのアソシエーションテスト\n\tit { should have_many(:posts) }\nend" },
    { game_list_id: 7, content: "RSpec.describe User, type: :model do\n#モデルのカスタムバリデーションテスト\n\tit 'is invalid without a name' do\n\t\tuser = User.new(name: nil)\n\t\texpect(user).not_to be_valid\n\tend\nend" },
    { game_list_id: 7, content: "RSpec.describe User, type: :model do\n#モデルのコールバックテスト\n\tit 'downcases the email before saving' do\n\t\tuser = User.create(email: 'TEST@EXAMPLE.COM')\n\t\texpect(user.email).to eq('test@example.com')\n\tend\nend" },
    { game_list_id: 7, content: "RSpec.describe User, type: :model do\n#モデルのスコープテスト\n\tdescribe '.active' do\n\t\tit 'returns only active users' do\n\t\t\tuser = User.create(active: true)\n\t\t\texpect(User.active).to include(user)\n\t\tend\n\tend\nend" },
    { game_list_id: 8, content: "RSpec.describe 'User sign in', type: :system do\n#ユーザーサインインのテスト\n\tit 'signs me in' do\n\t\tvisit new_user_session_path\n\t\tfill_in 'Email', with: 'user@example.com'\n\t\tfill_in 'Password', with: 'password'\n \t\tclick_button 'Log in'\n\t\texpect(page).to have_content('Signed in successfully')\n\tend\nend" },
    { game_list_id: 8, content: "RSpec.describe 'User registration', type: :system do\n#ユーザー登録のテスト\n\tit 'registers a new user' do\n\t\tvisit new_user_registration_path\n\t\tfill_in 'Email', with: 'newuser@example.com'\n\t\tfill_in 'Password', with: 'password'\n\t\tclick_button 'Sign up'\n\t\texpect(page).to have_content('Welcome! You have signed up successfully')\n\tend\nend" },
    { game_list_id: 8, content: "RSpec.describe 'User profile', type: :system do\n#ユーザープロフィール表示のテスト\n\tit 'displays user profile' do\n\t\tuser = create(:user)\n\t\tvisit user_path(user)\n\t\texpect(page).to have_content(user.name)\n\tend\nend" },
    { game_list_id: 8, content: "RSpec.describe 'User logout', type: :system do\n#ユーザーログアウトのテスト\n\tit 'logs me out' do\n\t\tvisit destroy_user_session_path\n\t\texpect(page).to have_content('Signed out successfully')\n\tend\nend" },
    { game_list_id: 8, content: "RSpec.describe 'User edit', type: :system do\n#ユーザー編集のテスト\n\tit 'edits user profile' do\n\t\tvisit edit_user_registration_path\n\t\tfill_in 'Name', with: 'Updated Name'\n\t\tclick_button 'Update'\n\t\texpect(page).to have_content('Your account has been updated successfully')\n\tend\nend" },
    { game_list_id: 9, content: "RSpec.describe 'Users', type: :request do\n#ユーザー一覧取得のテスト\n\tdescribe 'GET /index' do\n\t\tit 'returns http success' do\n\t\t\tget '/users'\n\t\t\texpect(response).to have_http_status(:success)\n\t\tend\n\tend\nend" },
    { game_list_id: 9, content: "RSpec.describe 'Users', type: :request do\n#ユーザー作成のテスト\n\tdescribe 'POST /create' do\n\t\tit 'creates a new user' do\n\t\t\tpost '/users', params: { user: { email: 'newuser@example.com', password: 'password' } }\n\t\t\texpect(response).to have_http_status(:created)\n\t\tend\n\tend\nend" },
    { game_list_id: 9, content: "RSpec.describe 'Users', type: :request do\n#ユーザー更新のテスト\n\tdescribe 'PATCH /update' do\n\t\tit 'updates the user' do\n\t\t\tuser = create(:user)\n\t\t\tpatch user_path(user), params: { user: { name: 'Updated Name' } }\n\t\t  expect(response).to have_http_status(:ok)\n\t\tend\n\tend\nend" },
    { game_list_id: 9, content: "RSpec.describe 'Users', type: :request do\n#ユーザー削除のテスト\n\tdescribe 'DELETE /destroy' do\n\t\tit 'deletes the user' do\n\t\t\tuser = create(:user)\n\t\t\tdelete user_path(user)\n\t\t\texpect(response).to have_http_status(:no_content)\n\t\tend\n\tend\nend" },
    { game_list_id: 9, content: "RSpec.describe 'Users', type: :request do\n#ユーザー詳細取得のテスト\n\tdescribe 'GET /show' do\n\t\tit 'returns http success' do\n\t\tuser = create(:user)\n\t\t\tget user_path(user)\n\t\texpect(response).to have_http_status(:success)\n\t\tend\n\tend\nend" },
    { game_list_id: 10, content: "<%= form_with(model: @user, local: true) do |form| %>\n  <%= form.label :email %>\n\t<%= form.text_field :email %>\n\t<%= form.submit 'Save' %>\n<% end %>" },
    { game_list_id: 10, content: "<%= link_to 'Edit Profile', edit_user_path(@user) %>" },
    { game_list_id: 10, content: "<%= render 'shared/header' %>\n<div class='container'>\n  <%= yield %>\n</div>" },
    { game_list_id: 10, content: "<%= form_with(url: user_path(@user), method: :patch) do |form| %>\n\t<%= form.label :name %>\n\t<%= form.text_field :name %>\n\t<%= form.submit 'Update' %>\n<% end %>" },
    { game_list_id: 10, content: "<%= link_to 'Back', users_path %>" },
    { game_list_id: 11, content: "class User < ApplicationRecord\n\tvalidates :email, presence: true, uniqueness: true\nend" },
    { game_list_id: 11, content: "class User < ApplicationRecord\n\tbefore_save: downcase_email\n\n\tprivate\n\n\tdef downcase_email\n\t\tself.email = email.downcase\n\t  end\nend" },
    { game_list_id: 11, content: "class Post < ApplicationRecord\n\tbelongs_to :user\nend" },
    { game_list_id: 11, content: "class User < ApplicationRecord\n\tscope :active, -> { where(active: true) }\nend" },
    { game_list_id: 11, content: "class User < ApplicationRecord\n\tvalidates :username, length: { minimum: 4 }\nend" },
    { game_list_id: 12, content: "class UsersController < ApplicationController\n\tdef index\n\t\t@users = User.all\n\tend\nend" },
    { game_list_id: 12, content: "class UsersController < ApplicationController\n\tdef create\n\t\t@user = User.new(user_params)\n\t\tif @user.save\n\t\t\tredirect_to @user\n\t\telse\n\t\t\trender 'new'\n\t\tend\n\tend\n\n\tprivate\n\n\tdef user_params\n\t\tparams.require(:user).permit(:email, :password)\n\tend\nend" },
    { game_list_id: 12, content: "class UsersController < ApplicationController\n\tdef edit\n\t\t@user = User.find(params[:id])\n\tend\nend" },
    { game_list_id: 12, content: "class UsersController < ApplicationController\n\tdef destroy\n\t\t@user = User.find(params[:id])\n\t\t@user.destroy\n\t\tredirect_to users_path\n\tend\nend" },
    { game_list_id: 12, content: "class UsersController < ApplicationController\n\tdef show\n\t\t@user = User.find(params[:id])\n\tend\nend" },
    { game_list_id: 13, content: "User.where(active: true).order(created_at: :desc)" },
    { game_list_id: 13, content: "User.joins(:posts).where(posts: { published: true })" },
    { game_list_id: 13, content: "User.includes(:profile).where(profiles: { visible: true })" },
    { game_list_id: 13, content: "User.group(:role).count" },
    { game_list_id: 13, content: "User.select(:name).where('age > ?', 18)" },
    { game_list_id: 14, content: "class User < ApplicationRecord\n\tvalidates :email, presence: true, uniqueness: true\nend" },
    { game_list_id: 14, content: "class Product < ApplicationRecord\n\tvalidates :price, numericality: { greater_than: 0 }\nend" },
    { game_list_id: 14, content: "class Order < ApplicationRecord\n\tvalidates :total_amount, numericality: { greater_than_or_equal_to: 0 }\nend" },
    { game_list_id: 14, content: "class Comment < ApplicationRecord\n\tvalidates :content, length: { minimum: 5 }\nend" },
    { game_list_id: 14, content: "class User < ApplicationRecord\n\tvalidates :username, presence: true, length: { maximum: 15 }\nend" },
  ]
end
